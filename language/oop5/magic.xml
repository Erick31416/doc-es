<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 3926279f825d418fdd2e7079968507d8b0c62b7d Maintainer: seros Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
 <title>Métodos mágicos</title>
 <para>
  Los métodos mágicos son métodos especiales que sobreescriben acciones por defecto
  cuando se realizan ciertas acciones sobre un objeto.
 </para>
 <caution>
  <simpara>
   Todos los nombres de los métodos que comienzan con <literal>__</literal> son reservados por PHP.
   Por lo tanto, se recomienda que no utilice los nombres de métodos a menos que se sobreescriba
   el comportamiento de PHP.
  </simpara>
 </caution>
 <para>
  Los siguientes nombres de métodos se consideran mágicos:
  <!-- Should be an itemized list ? -->
  <link linkend="object.construct">__construct()</link>,
  <link linkend="object.destruct">__destruct()</link>,
  <link linkend="object.call">__call()</link>,
  <link linkend="object.callstatic">__callStatic()</link>,
  <link linkend="object.get">__get()</link>,
  <link linkend="object.set">__set()</link>,
  <link linkend="object.isset">__isset()</link>,
  <link linkend="object.unset">__unset()</link>,
  <link linkend="object.sleep">__sleep()</link>,
  <link linkend="object.wakeup">__wakeup()</link>,
  <link linkend="object.serialize">__serialize()</link>,
  <link linkend="object.unserialize">__unserialize()</link>,
  <link linkend="object.tostring">__toString()</link>,
  <link linkend="object.invoke">__invoke()</link>,
  <link linkend="object.set-state">__set_state()</link>,
  <link linkend="object.clone">__clone()</link>, and
  <link linkend="object.debuginfo">__debugInfo()</link>.
 </para>

  <warning>
   <!-- See for a code example of this behaviour: https://3v4l.org/Bov34 -->
   <simpara>
    Todos los métodos mágicos, a excepción de
    <link linkend="object.construct">__construct()</link>,
    <link linkend="object.destruct">__destruct()</link>, y
    <link linkend="object.clone">__clone()</link>,
    <emphasis>deben ser</emphasis> declarados como <literal>público</literal>,
    en caso contrario se emite un <constant>E_WARNING</constant>.
    Antes de PHP 8.0.0, no se emitía ningún diagnóstico para los métodos mágicos
    <link linkend="object.sleep">__sleep()</link>,
    <link linkend="object.wakeup">__wakeup()</link>,
    <link linkend="object.serialize">__serialize()</link>,
    <link linkend="object.unserialize">__unserialize()</link>, y
    <link linkend="object.set-state">__set_state()</link>.
   </simpara>
  </warning>
  <warning>
   <para>
    Si se utilizan tipo de declaraciones usados en la definición de un método mágico,
    deben ser idénticas a la firma descrita en este documento.
    De lo contrario, se emite un error fatal.
    Antes de PHP 8.0.0, no se emitía ningún diagnóstico.
    Sin embargo, <link linkend="object.construct">__construct()</link> y
    <link linkend="object.destruct">__destruct()</link> no debe declarar un tipo de retorno;
    de lo contrario se emite un error fatal.
   </para>
  </warning>

 <sect2 xml:id="language.oop5.magic.sleep">
  <title>
    <link linkend="object.sleep">__sleep()</link> y
    <link linkend="object.wakeup">__wakeup()</link>
  </title>

  <methodsynopsis xml:id="object.sleep">
   <modifier>public</modifier> <type>array</type><methodname>__sleep</methodname>
   <void/>
  </methodsynopsis>
  <methodsynopsis xml:id="object.wakeup">
   <modifier>public</modifier> <type>void</type><methodname>__wakeup</methodname>
   <void/>
  </methodsynopsis>

  <para>
    <function>serialize</function> comprueba si la clase tiene un método con el nombre mágico
    <link linkend="object.sleep">__sleep()</link>. Si es así, el método
    se ejecuta antes de cualquier serialización. Se puede limpiar el objeto
    y se supone que devuelve un array con los nombres de todas las variables
    de el objeto que se va a serializar.
    Si el método no devuelve nada, entonces &null; es serializado y un error
    <constant>E_NOTICE</constant> es emitido.
  </para>
  <note>
    <para>
      No es posible para <link linkend="object.sleep">__sleep()</link> devolver
      nombres de propiedades privadas en las clases padres. Hacer esto resultaría un nivel de error
      <constant>E_NOTICE</constant>.
      En su lugar, puede utilizar la interfaz <classname>Serializable</classname>.
    </para>
  </note>
  <para>
    El uso para el que está destinado <link linkend="object.sleep">__sleep()</link>
    consiste en confirmar datos pendientes o realizar tareas similares de limpieza.
    Además, el método es útil si tiene objetos muy grandes que no necesitan guardarse por completo.
  </para>
  <para>
    Por el contrario,
    <function>unserialize</function>
    comprueba la presencia de un método con el nombre mágico
    <link linkend="object.wakeup">__wakeup()</link>. Si está presente, este método
    puede reconstruir cualquier recurso que el objeto pueda tener.
  </para>
  <para>
    El uso para el que está destinado
    <link linkend="object.wakeup">__wakeup()</link>
    es restablecer las conexiones de base de datos que se puedan haber perdido
    durante la serialización y realizar otras tareas de reinicialización.
  </para>
  <example>
    <title>Sleep y wakeup</title>
    <programlisting role="php">
      <![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;

    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }

    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }

    public function __sleep()
    {
        return array('dsn', 'username', 'password');
    }

    public function __wakeup()
    {
        $this->connect();
    }
}?>
]]>
    </programlisting>
  </example>
</sect2>

  <sect2 xml:id="language.oop5.magic.serialize">
   <title>
    <link linkend="object.serialize">__serialize()</link> y
    <link linkend="object.unserialize">__unserialize()</link>
   </title>

   <methodsynopsis xml:id="object.serialize">
    <modifier>public</modifier> <type>array</type><methodname>__serialize</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.unserialize">
    <modifier>public</modifier> <type>void</type><methodname>__unserialize</methodname>
    <methodparam><type>array</type><parameter>data</parameter></methodparam>
   </methodsynopsis>

   <para>
    <function>serialize</function> comprueba si la clase tiene una función mágica
    con el nombre <link linkend="object.serialize">__serialize()</link>. Si es así, esa función se
    ejecuta antes de cualquier serialización. Debe construir y devolver un array asociativo de pares clave/valor
    que representen la forma serializada del objeto. Si no se devuelve ningún array, se lanzará una clase <classname>TypeError</classname>.
   </para>
   <note>
    <para>
     Si tanto <link linkend="object.serialize">__serialize()</link> y <link linkend="object.sleep">__sleep()</link>
     están definidos en el mismo objeto, sólo se llamará a <link linkend="object.serialize">__serialize()</link>.
     <link linkend="object.sleep">__sleep()</link> será ignorado. Si el objeto implementa la interfaz <link linkend="class.serializable">Serializable</link>
     el método <literal>serialize()</literal>de la interfaz será ignorado y se utilizará <link linkend="object.serialize">__serialize()</link>
     en su lugar.
    </para>
   </note>
   <para>
    El uso previsto de <link linkend="object.serialize">__serialize()</link> es definir una representación arbitraria
    del objeto que sea fácil de serializar. Los elementos de la matriz pueden corresponder a propiedades del objeto,
    pero no es necesario.
   </para>
   <para>
    Por el contrario, <function>unserialize</function> comprueba la presencia
    de una función con el nombre mágico
    <link linkend="object.unserialize">__unserialize()</link>. Si está presente, a esta función se le pasará el array
    restaurado que fue devuelto por <link linkend="object.serialize">__serialize()</link>. Entonces puede
    restaurar las propiedades del objeto desde ese array según sea apropiado.
   </para>
   <note>
    <para>
     Si tanto <link linkend="object.unserialize">__unserialize()</link> y <link linkend="object.wakeup">__wakeup()</link>
     son definidos en el mismo objeto, sólo se llamará a <link linkend="object.unserialize">__unserialize()</link>.
     <link linkend="object.wakeup">__wakeup()</link> será ignorado.
    </para>
   </note>
   <note>
    <para>
     Esta función está disponible a partir de PHP 7.4.0.
    </para>
   </note>
   <example>
    <title>Serialize y unserialize</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;

    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }

    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }

    public function __serialize(): array
    {
        return [
          'dsn' => $this->dsn,
          'user' => $this->username,
          'pass' => $this->password,
        ];
    }

    public function __unserialize(array $data): void
    {
        $this->dsn = $data['dsn'];
        $this->username = $data['user'];
        $this->password = $data['pass'];

        $this->connect();
    }
}?>
]]>
    </programlisting>
   </example>
  </sect2>

<sect2 xml:id="language.oop5.magic.tostring">
  <title>
    <link linkend="object.tostring">__toString()</link>
  </title>
  <methodsynopsis xml:id="object.tostring">
    <modifier>public</modifier> <type>string</type><methodname>__toString</methodname>
    <void/>
  </methodsynopsis>
  <para>
    El método <link linkend="object.tostring">__toString()</link> permite a una clase decidir
    cómo comportarse cuando se le trata como un string. Por ejemplo, lo que
    <literal>echo $obj;</literal> mostraría.
    Este método debe devolver un string, si no se emitirá un nivel de error fatal
    <constant>E_RECOVERABLE_ERROR</constant>.
  </para>
  <warning>
   <para>
    As of PHP 8.0.0, the return value follows standard PHP type semantics,
    meaning it will be coerced into a <type>string</type> if possible and if
    <link linkend="language.types.declarations.strict">strict typing</link>
    is disabled.
   </para>
   <para>
    As of PHP 8.0.0, any class that contains a <link linkend="object.tostring">__toString()</link>
    method will also implicitly implement the <interfacename>Stringable</interfacename> interface, and will
    thus pass type checks for that interface.  Explicitly implementing the interface anyway is
    recommended.
   </para>
   <para>
    In PHP 7.4, the returned value <emphasis>must</emphasis> be a
    <type>string</type>, otherwise an <classname>Error</classname> is thrown.
   </para>
   <para>
    Prior to PHP 7.4.0, the returned value <emphasis>must</emphasis> be a
    <type>string</type>, otherwise a fatal <constant>E_RECOVERABLE_ERROR</constant>
    is emitted.
   </para>
  </warning>
  <warning>
    <simpara>
      No se puede lanzar una excepción desde dentro un método
      <link linkend="object.tostring">__toString()</link>.
      El método antes de PHP 7.4.0. Si lo hace, se producirá un error fatal.
    </simpara>
  </warning>
  <example>
    <title>Ejemplo simple</title>
    <programlisting role="php">
      <![CDATA[
<?php
// Declarar una clase simple
class TestClass
{
    public $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    public function __toString()
    {
        return $this->foo;
    }
}

$class = new TestClass('Hola Mundo');
echo $class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
      <![CDATA[
Hola Mundo
]]>
    </screen>
  </example>
  <para>
    Antes de PHP 5.2.0 el método
    <link linkend="object.tostring">__toString()</link>
    se llama sólo cuando se combina directamente con
    <function>echo</function>
    o
    <function>print</function>. Desde PHP 5.2.0, se le llama en cualquier contexto de string (e.j. en
    <function>printf</function>
    con el modificador
    <literal>%s</literal>) pero no en el contexto de otros tipos (e.j. con el modificador
    <literal>%d</literal>). Desde PHP 5.2.0, la conversión de los objetos sin el método
    <link linkend="object.tostring">__toString()</link>
    a string podría causar
    <constant>E_RECOVERABLE_ERROR</constant>.
  </para>
</sect2>

<sect2 xml:id="language.oop5.magic.invoke">
  <title>
    <link linkend="object.invoke">__invoke()</link>
  </title>
  <methodsynopsis xml:id="object.invoke">
    <type>mixed</type>
    <methodname>__invoke</methodname>
    <methodparam choice="opt">
      <parameter>...</parameter>
    </methodparam>
  </methodsynopsis>
  <para>
    El método
    <link linkend="object.invoke">__invoke()</link>
    es llamado cuando un script intenta llamar a un objeto como si fuera una función.
  </para>
  <note>
    <para>
      Esta característica está disponible desde PHP 5.3.0.
    </para>
  </note>
  <example>
    <title>Uso de
      <link linkend="object.invoke">__invoke()</link>
    </title>
    <programlisting role="php">
      <![CDATA[
<?php
class CallableClass
{
    public function __invoke($x)
    {
        var_dump($x);
    }
}
$obj = new CallableClass;
$obj(5);
var_dump(is_callable($obj));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
      <![CDATA[
int(5)
bool(true)
]]>
    </screen>
  </example>
</sect2>

<sect2 xml:id="language.oop5.magic.set-state">
  <title>
    <link linkend="object.set-state">__set_state()</link>
  </title>
  <methodsynopsis xml:id="object.set-state">
   <modifier>static</modifier> <type>object</type><methodname>__set_state</methodname>
   <methodparam><type>array</type><parameter>properties</parameter></methodparam>
  </methodsynopsis>
  <para>
    Este método <link linkend="language.oop5.static">static</link> es llamado
    para las clases exportadas por <function>var_export</function>.
  </para>
  <para>
    El único parámetro de este método es un array que contiene las propiedades exportadas
    en la forma <literal>['property' => value, ...]</literal>.
  </para>
  <example>
    <title>Uso de <link linkend="object.set-state">__set_state()</link></title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public $var1;
    public $var2;

    public static function __set_state($an_array)
    {
        $obj = new A;
        $obj->var1 = $an_array['var1'];
        $obj->var2 = $an_array['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

$b = var_export($a, true);
var_dump($b);
eval('$c = ' . $b . ';');
var_dump($c);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(60) "A::__set_state(array(
   'var1' => 5,
   'var2' => 'foo',
))"
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
  </example>
  <note>
    <simpara>
      Al exportar un objeto, <function>var_export</function> no comprueba si
      <link linkend="object.set-state">__set_state()</link> está implementado por la clase del objeto,
      por lo que la reimportación de tales objetos dará lugar a una excepción <classname>Error</classname>,
      si __set_state() no está implementado. En particular, esto afecta a algunas
      clases internas.
    </simpara>
    <simpara>
      Es responsabilidad del programador verificar que solamente se vayan a reimportar
      los objetos cuya clase implemente __set_state().
    </simpara>
  </note>
</sect2>

<sect2 xml:id="language.oop5.magic.debuginfo">
  <title><link linkend="object.debuginfo">__debugInfo()</link></title>
   <methodsynopsis xml:id="object.debuginfo">
    <type>array</type><methodname>__debugInfo</methodname>
    <void/>
   </methodsynopsis>
  <para>
    Este método es invocado por <function>var_dump</function> al volcar un
    objeto para obtener las propiedades que deberían mostrarse. Si el método no está
    definido sobre un objeto, se mostrarán todas las propiedades públicas
    protegidas y privadas.
  </para>
  <example>
    <title>Utilizar <link linkend="object.debuginfo">__debugInfo()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class C {
    private $prop;

    public function __construct($val) {
        $this->prop = $val;
    }

    public function __debugInfo() {
        return [
            'propSquared' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (1) {
  ["propSquared"]=>
  int(1764)
}
]]>
    </screen>
  </example>
</sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
