<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9ee9eccf455188ab6eb352194eb6f9eb99e15606 Maintainer: seros Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->

<sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
 <title>Propiedades</title>

 <para>
  Las variables pertenecientes a una clase se llaman <emphasis>propiedades</emphasis>.
  También se les puede llamar usando otros términos como <emphasis>atributos</emphasis>,
  o <emphasis>campos</emphasis>, pero para los propósitos de esta referencia se va a utilizar
  <emphasis>propiedades</emphasis>. Éstas se definen usando una de las palabras reservadas
  <literal>public</literal>, <literal>protected</literal>,
  o <literal>private</literal>, opcionalmente, a partir de PHP 7.4,
  seguido de una declaración de tipo, seguida de una declaración de variable normal.
  Esta declaración puede incluir una inicialización, pero
  esta inicialización debe ser un valor de <link linkend="language.constants">constante</link>.
 </para>
 <para>
  Véase la <xref linkend="language.oop5.visibility" /> para más
  información sobre el significado de
  <literal>public</literal>, <literal>protected</literal>,
  y <literal>private</literal>.
 </para>
 <note>
  <para>
   Como alternativa y no recomendada de declarar las propiedades de una clase, ya que es
   para mantener la compatibilidad con PHP 4, se acepta el uso
   de la palabra reservada <literal>var</literal>.
   Esta tratará la propiedad de forma idéntica a como se
   hubiera declarado como <literal>public</literal>.
  </para>
 </note>
 <para>
  Dentro de los métodos de una clase, se puede acceder a las propiedades no estáticas utilizando
  <literal>-&gt;</literal> (el operador de objeto): <varname>$this-&gt;propiedad</varname>
  (donde <literal>propiedad</literal> es el nombre de la propiedad).
  A las propiedades estáticas se puede acceder utilizando <literal>::</literal> (doble dos puntos):
  <varname>self::$propiedad</varname>. Véase <link linkend="language.oop5.static">la palabra reservada 'static'</link>
  para más información sobre la diferencia entre propiedades estáticas y no estáticas.
 </para>
 <para>
  La pseudovariable <varname>$this</varname> está disponible dentro de
  cualquier método de clase cuando éste es invocado dentro del contexto
  de un objeto. <varname>$this</varname> es una referencia al objeto
  invocador (usualmente el objeto al cual pertenece el método,
  aunque puede que sea otro objeto si el método es llamado
  <link linkend="language.oop5.static">estáticamente</link>
  desde el contexto de un objeto secundario).
 </para>

 <para>
  <example>
   <title>Declaración de propiedades</title>
   <programlisting role="php">
<![CDATA[
<?php
class ClaseSencilla
{
   public $var1 = 'hola ' . 'mundo';
   public $var2 = <<<EOD
hola mundo
EOD;
   public $var3 = 1+2;
   // Declaraciones de propiedades inválidas:
   public $var4 = self::miMétodoEstático();
   public $var5 = $myVar;

   // Declaraciones de propiedades válidas:
   public $var6 = miConstante;
   public $var7 = array(true, false);

   public $var8 = <<<'EOD'
hola mundo
EOD;
}
?>
]]>
   </programlisting>
  </example>
 </para>

 <note>
  <para>
   Existen varias funciones interesantes para manipular clases y objetos.
   Puede ser interesante echarle un vistazo a las
   <link linkend="ref.classobj">Funciones de clases/objetos</link>.
  </para>
 </note>

  <sect2 xml:id="language.oop5.properties.typed-properties">
   <title>Declaraciones de tipo</title>
   <para>
    A partir de PHP 7.4.0, las definiciones de propiedades pueden incluir un
    <xref linkend="language.types.declarations" />,
    con la excepción de los <type>callable</type>.
    <example>
     <title>Ejemplo de propiedades tipadas</title>
     <programlisting role="php">
<![CDATA[
<?php

class User
{
    public int $id;
    public ?string $name;

    public function __construct(int $id, ?string $name)
    {
        $this->id = $id;
        $this->name = $name;
    }
}

$user = new User(1234, null);

var_dump($user->id);
var_dump($user->name);

?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
int(1234)
NULL
]]>
     </screen>
    </example>
   </para>

   <para>
    Las propiedades tipadas deben ser inicializadas antes de acceder a ellas,
    de lo contrario se produce un <classname>Error</classname>.
    <example>
     <title>Acceso a las propiedades</title>
     <programlisting role="php">
<![CDATA[
<?php

class Shape
{
    public int $numberOfSides;
    public string $name;

    public function setNumberOfSides(int $numberOfSides): void
    {
        $this->numberOfSides = $numberOfSides;
    }

    public function setName(string $name): void
    {
        $this->name = $name;
    }

    public function getNumberOfSides(): int
    {
        return $this->numberOfSides;
    }

    public function getName(): string
    {
        return $this->name;
    }
}

$triangle = new Shape();
$triangle->setName("triangle");
$triangle->setNumberofSides(3);
var_dump($triangle->getName());
var_dump($triangle->getNumberOfSides());

$circle = new Shape();
$circle->setName("circle");
var_dump($circle->getName());
var_dump($circle->getNumberOfSides());
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
string(8) "triangle"
int(3)
string(6) "circle"

Fatal error: Uncaught Error: Typed property Shape::$numberOfSides must not be accessed before initialization
]]>
     </screen>
    </example>
   </para>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
